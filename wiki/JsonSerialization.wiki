#labels Featured,Json
# Using the json serialization module.

=Purpose=

The rocket.json package includes a simple provision to map java objects to a json encoded stream. This makes it easy to build a java object
from json without any manual binding.



The library supports the following mappings from json to java.


  *Json objects become java objects or `java.util.Map`
  *Json arrays become `java.util.List` or `java.util.Set`
  *Json numbers become any of the numeric primitives `byte, short, int, long, float, or double`.
  *Json Strings become `java.lang.String` or chars(which are actually useless but included for completeness)
  *Json booleans become `booleans`


=Requirements=
==Class and JsonSerializable==

Following in java / gwt tradition a marker interface must be implemented by classes that wish to be serializable. In the case
of the rocket library this is `rocket.json.client.JsonSerializable`.


_
By design the `java.io.Serializable` and `com.google.gwt.user.client.rpc.IsSerializable` are already mapped to a different Generator which produces (de)serializers for the GWT rpc subsystem.
_


==Fields annotations.==

The `rocket json` package needs some help in mapping a json stream into a java object.
Only non transient, instance fields will be serializable. The visibilty of the field does not affect its ability to be (de)serialized.


_
The generator (`rocket.json.rebind.JsonSerializerGenerator`) uses JSNI to set each of the individual fields belonging to the instance being built. Field access visibility rules are not
enforced within JSNI code.
_

===Json objects===
Each json object which is ultimately made up of key/value pairs maps to a single java type. Each field belonging to the type must use annotations to say what key will be used to populate it.
{{{

/**
* Something about the foo field..
* Maps a value referened by the "bar" key to the foo field for the enclosed class.
*
* @javascriptPropertyName bar
*/
private String foo;
}}}

===Json array===

An annotation must be included to tell the system the type of each element of the list or set.


{{{
/**
* Something about the foo field..
*
* The elements of the foo json array will be interpretted as Strings.
*
* @listElementType <java.lang.String>
*/
private String foo;
}}}

=Getting started with a quick simple example...=

The following steps below list what and why is needed to use this facility in your own development efforts.


==Importing the rocket module==

Add the rocket module to your own module.

{{{
<module name="Rocket.User" />
}}}

==Json==

The sample below includes a simple json object graph which includes all json types. It will be used as the basis for the contrived
Java classes created below.

{{{
	{
		"foo":	true;           *// json boolean.*
		"bar":  123;  	        *// json number*
		"array": [ 1, 2, 3 ];	*// json array *
		"object" {
		   "baz":  "apple"; 	*// json string*
		}
	}
}}}

==Binding classes==

Two separate classes are required, one for each json object present in the convulted example given above.
The outter object includes 4 properties.

  *foo
  *bar
  *array
  *object



The code snippet below includes all the fields and required annotations that would be required to map the outter object to a class called
OutterClass.


{{{
package somepackage;
import rocket.json.client.JsonSerializable;

public class OutterClass implements JsonSerializable{
	/**
	* @javascriptPropertyName foo
	*/
	private boolean foo;
	/**
	* @javascriptPropertyName bar
	*/
	private int number;
	/**
	* @javascriptPropertyName array
	* @listElementType <java.lang.Integer>
	*/
	private java.util.List number;
	/**
	* @javascriptPropertyName object
	*/
	private InnerClass innerClass;
}
}}}


The inner object includes 1 property.

  * baz



The code snippet below includes all the fields and required annotations that would be required to map the inner object to a class called InnerClass.


{{{
package somepackage;
import rocket.json.client.JsonSerializable;

public class InnerClass implements JsonSerializable{
	/**
	* @javascriptPropertyName baz
	*/
	private String baz;
}
}}}

==Application code==

Include required import statements.

{{{
import rocket.json.client.JsonSerializer;
}}}


To de serialize a json object to java a reference to a JsonSerializer must obtained using deferred binding.

{{{
JSONObject jsonObject = *// already got it from somewhere...*
JsonSerializer deserialize = (JsonSerialize) GWT.create( SomeClass.class );
}}}


Then proceed to ask the deserializer to build a java object from the given json object.
A `rocket.json.client.JsonDeserializationException` will be thrown if anything goes wrong. Its not checked which adds flexibility.

{{{
SomeClass instance = (SomeClass) deserialize.asObject( jsonObject );
}}}

=Further samples=

For further examples refer to the unit test `rocket.json.test.client.JsonGwtTestCase`
