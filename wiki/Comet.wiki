#labels Featured,Comet
=Purpose=

The purpose of the `rocket.remoting.client.comet` package is to allow the server to push java objects data to a browser. The client application must initiate the initial connection to the server. After that the channel remains open and the server can push objects to the client as required. The client cannot reply or push objects back to the server. This must be done using another mechanism.

This solution requires a client and J2EE server with servlets to work in tandem.
Any java servlet container including tomcat may be used.

=Getting started=

The following steps below list what and why is needed to use this facility in your own development efforts.


==Importing the rocket module==

Add the rocket module to your own application module.

{{{
<module name="Rocket.User" />
}}}


==Server side==

A servlet must be created which extends `rocket.remoting.server.CometServerServlet` and implements the `queryObjectSource()` method. The servlet must block for an appropriate time and eventually return an instance which is then pushed to the client. Returning null results in the server pushing a heartbeat to keep the connection open, otherwise the object instance is pushed down the wire.

The servlet must defined within a container's web.xml. The mapped url will be used by the client to establish a communication channel.

The sample shows a typical CometServerServlet implementation with the only thing being required is a poll upon some source.
{{{
package example;

import rocket.remoting.server.CometServerServlet;

public SampleCometServletServlet extends CometServerServlet{
	protected Object queryObjectSource(){
		// return poll something builidng any new CometPayloads.
	}
}
}}}

==Client side==

A number of types must be created as part of the process of creating a comet client.

  * Create a sub-class `rocket.remoting.client.CometClient`.
  * Create a GWT RemoteService and corresponding Async service interface with a method with a return type compatible with  the objects being pushed by the server.
  * Pass a `com.google.gwt.user.client.rpc.AsyncCallback` to handle any incoming objects.

The sample class below includes an example of the implemented abstract CometClient method.
{{{
package example;

import rocket.remoting.client.CometClient;
import rocket.remoting.client.CometServerConnectionFailureException;

public ExampleCometClient extends CometClient{
    protected Object createProxy() {
        return GWT.create( InterfaceWhichReturnsCometPayload.class);
    }
};
}}}

Refer to GWT documentation for further info about creating a GWT RemoteService and Async interface.

===Starting a comet session===

The code sample below shows how to create and start a comet session with the server.

{{{
	ExampleCometClient cometClient = new ExampleCometClient();
	client.setUrl("...CometServerServlet url...");
	cometClient.setCallback( new AsyncCallback(){
		public void onSuccess( final Object incoming ){
			// cast to return type of method within InterfaceWhichReturnsCometPayload...*
			CometPayload payload = (CometPayload) incoming;

			// do something with payload...
			...
		}

		public void onThrowable( final Throwable cause ){
			// handle problem
		}
	});
	cometClient.start();
}}}

=Further samples=

For further examples refer to the unit test. The `rocket.remoting.test.comet.client.CometTest` class is a working comet client, with
`rocket.remoting.test.comet.server.TestCometObjectStreamingServlet` representing the server portion.


