#labels Featured,Selection
=Motivation=

The purpose of the rocket.selection package is to expose in a browser independent manner the ability to work with selections. 

=The solution=
The selection module provides a singleton which in turn may be used to manipulate or discover more about a selection that exists on the current page.

==rocket.client.selection.Selection==
Pasted below is the public interface of the `rocket.client.selection.Selection` class. An additional class exists to define selection end points `rocket.client.selection.SelectionEndPoint` which consists of two properties, a text node and offset properties.
 
{{{
public class Selection {

	/**
	 * Returns the document Selection singleton
	 * 
	 * @return
	 */
	static public Selection getSelection();

	/**
	 * Disables text selection for this element and all its child elements.
	 * 
	 * It is not possible to re enable text selection for a child using
	 * {@link #enableTextSelection(Element)}
	 * 
	 * @param element
	 */
	public static void disableTextSelection(final Element element);

	public static void disableTextSelection();

	/**
	 * Enables text selection for an element that was possibly previously
	 * disabled.
	 * 
	 * It is not possible to re enable text selection for a child if a ancestor
	 * has been disabled using {@link #disableTextSelection(Element)}
	 * 
	 * @param element
	 */
	public static void enableTextSelection(final Element element) ;

	public static void enableTextSelection();

	/**
	 * Clears or removes any current text selection.
	 * 
	 */
	public static void clearAnySelectedText();

	/**
	 * Updates the given element so that mouse selection is re-enabled.
	 * 
	 * @param element
	 */
	static public void setEnabled(final Element element, final boolean enabled);

	static public boolean isEnabled(final Element element);

	public SelectionEndPoint getStart();

	public void setStart(final SelectionEndPoint start);

	public SelectionEndPoint getEnd();

	public void setEnd(final SelectionEndPoint end);

	/**
	 * Tests if anything is currently being selected
	 * 
	 * @return
	 */
	public boolean isEmpty();

	/**
	 * Clears any current selection.
	 */
	public void clear();

	/**
	 * Extracts the selection and moves it to become the only child of a new
	 * element.
	 * 
	 * If not selection is active the returned element will have no child / its
	 * innerHTML property will be an empty String.
	 */
	public Element extract();

	/**
	 * Inserts the given element into the dom so that it is a child of the given
	 * element and yet contains the selected area.
	 * 
	 * This class includes a guard to ensure that a selection exists if not an
	 * exception is thrown.
	 * 
	 * @param element
	 */
	public void surround(final Element element);

	/**
	 * Delets the selection's content from the document.
	 */
	public void delete();

}}}

=Getting started=

Add the rocket module to your own project module.

{{{
<module name="Rocket.User" />
}}}

=Further samples=

For further examples refer to the unit demo. The demo is interactive and prompts the user to perform or verify each of the capabilities.
  `rocket.selection.test.selection.client.SelectionTest`