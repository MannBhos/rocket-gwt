#labels Featured,Json,Serialization
=Purpose=
The primary purpose of the rocket.remoting.client.json package is to make the steps to work with a remote server's json services almost the same as those required by a GWT RPC.

==Similaries between GWT and RemoteJsonService==
Many of the steps involved in using a GWT RPC have identical equivalents. 
  * Both require their respective value objects to be serializable. This is indicated by different marker interfaces.
  * A service interface must be defined.
  * A Async service interface must also be defined.
  * A proxy is retrieved using deferred binding.
  * The target url must then be set after casting to ServiceDefTarget.
  * A callback is notified of the rpc response, returning a object instance upon success or a Throwable when something goes wrong.

Both systems take care of the marshalling / unmarshalling required to convert an encoded String to a JavaObject.

The rocket module uses another related module to handle its binding requirements `rocket.json.Json`. Refer to that wiki for more info on preparing JsonSerializable types.

=Getting started=

The following steps below list what and why is needed to use this facility in your own development efforts.


==Importing the rocket module==

Add the rocket module to your own application module.

{{{
<module name="Rocket.User" />
}}}

==Creating a GWT Service interface==

The sample below includes a simple service interface with all required annotations.
The `@httpRequestMethod` is used to specify if a GET or a POST will be made to the target.
The `@httpRequestParameterName` annotations (one is required for each method parameter are used to eventually build a querystring or post data for the target.

Input parameters each method can only be a primitive type 
  * boolean
  * byte
  * short
  * int
  * long
  * float
  * double
  * char
  * java.lang.String

The interface below assumes that the JsonResponsePayload type satisfies all the requirements of a JsonSerializable.
{{{
package example;

import rocket.remoting.client.json.RemoteJsonService;

public interface ServiceInterface extends RemoteJsonService{
	/**
	* @httpRequestMethod GET
	* @httpRequestParameterName one
	* @httpRequestParameterName two
	* @httpRequestParameterName three
	*/
	JsonResponsePayload invokeServer( boolean first, int second, String third );
}
}}}

==Creating a GWT Async interface==

A Async interface must be created for the matching service. The rules for the creation of the async interface are identical to those of a GWT RPC Async service interface.

  * Append Async to the service interface name.
  * Copy all public service methods to the async service interface, changing the return type to void and adding a AsyncCallback argument.

The sample below gives the async complement of the interface previously defined.
{{{
package example;

import rocket.remoting.client.json.RemoteJsonService;
import com.google.gwt.user.client.rpc.AsyncCallback;

public interface ServiceInterfaceAsync{
	void invokeServer( boolean first, int second, String third, AsyncCallback callback );
}
}}}

==Invoking the Json service==

The statements required to execute the remote json service are almost a carbon copy of those required to execute a GWT rpc.

Import statements
{{{
   // skipped
}}}


Get a reference to the proxy via deferred binding.
{{{
ServiceInterfaceAsync service = (ServiceInterfaceAsync) GWT.create( ServiceInterface.class );
}}}


Set the target url.
{{{
ServiceDefTarget serviceDefTarget = (ServiceDefTarget) service;
serviceDefTarget.setServiceEntryPoint( "targetUrl" );
}}}


Invoke the service. The given callback will be notified with the response or handle any errors encountered.


{{{
service.invokeServer( true, 1, "apple", new AsyncCallback(){
	public void onSuccess( final Object result ){
		// cast to JsonResponsePayload*
		JsonResponsePayload payload = (JsonResponsePayload) result;

		// continue with appropriate logic.*
	}

	public void onFailure( final Throwable throwable ){
		// oops handle the throwable which is actually a `rocket.remoting.client.json.RemoteJsonServiceException`*
	}

} );

}}}


=Further samples=

For further examples refer to the unit test `rocket.remoting.test.remotejsonservice.client.RemoteJsonServiceGwtTestCase`






