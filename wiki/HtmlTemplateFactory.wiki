#labels Featured
=Motivation=
Currently GWT does not provide a mechanism to easily glue pre existing elements to widget instances.

Ignore the fact the result if viewed in a browser would be very simplistic and ugly.

==Sample Html==
The html file contains three elements with ids.
{{{
<html>
	<body>
		...
		<form>
			Login:    <input type="text"      id="username"/>
			Password: <input type="password"  id="password"/>
	        	<button id="submit">Login</button>
		</form>
		...
	</body>
</html>
}}}

Wouldnt it be nice to be able to use the username textbox as a TextBox widget, the password textbox as a Password widget and the submit button as a Button widget ?
`rocket.widget.client.HtmlTemplateFactory` extends the advantages of the improvements introduced by rocket's basic widgets, refer to that wiki for more info.

=Doing the same using rocket's basic widgets.=
Whilst its already possible to easily glue the elements found in the html page and widgets using code something like the below, `rocket.widget.client.HtmlTemplateFactory` goes one step further.
Currently its quite as easy to do the same with regular GWT widgets.

{{{
package ...

import com.google.gwt.user.client.DOM
import rocket.widget.client.TextBox;
import rocket.widget.client.Button;

...

	TextBox username = new TextBox( DOM.getElementById( "username" ));
	System.out.println( username.isPassword ); // prints false

	TextBox password = new TextBox( DOM.getElementById( "password" ));
	System.out.println( password.isPassword ); // prints true

	Button submit = new Button( DOM.getElementById( "submit" ));

	System.out.println( submit.getParent() ); // will print RootPanel.
}}}

The next portion of this wiki shows how to use HtmlTemplateFactory to achieve the same in even less lines of code (less clutter is better).

=Using HtmlTemplateFactory=
`rocket.widget.client.HtmlTemplateFactory` is an interface that lets the user define a number of getter methods, an annotation of an element for each method. The generator then creates all the glue code that realises the getters.

So a custom HtmlTemplateFactory that would return a textbox, password and button widgets from the sample html page would look something like this.
{{{
package ...

import rocket.widget.client.TextBox;
import rocket.widget.client.Button;
import rocket.widget.client.HtmlTemplateFactory;

public interface ExampleHtmlTemplateFactory extends HtmlTemplateFactory {

	/*
	 * @id=textbox
	 */
	TextBox getUsername();

	/*
	 * @id=password
	 */
	TextBox getPassword();


	/*
	 * @id=submit
	 */
	Button getSubmit();
}
}}}

To fetch the factory use deferred binding passing in the class literal of the customised HtmlTemplateFactory.
The sample below shows how to get the username, password and submit widgets.

{{{
package ...

import com.google.gwt.core.client.GWT;

import rocket.widget.client.TextBox;
import rocket.widget.client.Button;
import rocket.widget.client.HtmlTemplateFactory;

...
	// inside some method...
	ExampleHtmlTemplateFactory factory = GWT.create( ExampleHtmlTemplateFactory.class );

	TextBox username = factory.getUsername();
	TextBox password = factory.getPassword();
	TextBox submit = factory.getSubmit();

}}}

==Supported widgets==
The table below includes a mapping between html elements to rocket widgets.

|| Html element || Widget ||
|| A || `rocket.widgets.client.Hyperlink` ||
|| BUTTON || `rocket.widgets.client.Button` ||
|| INPUT type=checkbox || `rocket.widgets.client.CheckBox` || 
|| INPUT type=password || `rocket.widgets.client.TextBox` ||
|| INPUT type=radiobutton || `rocket.widgets.client.RadioButton` ||
|| INPUT type=text || `rocket.widgets.client.TextBox` ||
|| SELECT || `rocket.widgets.client.ListBox` ||
|| TEXTAREA || `rocket.widgets.client.TextArea` ||

Dont worry even though the password is a TextBox it is actually a browser password element.

==Features==

The list below contains some of the features and behavours of the provided HtmlTemplateFactory instance.
  * All interface methods must have no paramters. 
  * The id of the target element is specified via an annotation *@id*
  * The return type of each method must be compatible with the actual element type.
  * Multiple calls to the same getter will return the same widget instance (widget instances are singletons/cached).
  * Widgets fetched from a HtmlTemplateFactory are all children of the main RootPanel.
  * Each widget may be removed from the original RootPanel and added to another panel just like regular widgets.

Thats it!.

=What HtmlTemplateFactory cant do=

Most of the things that HtmlTemplateFactory cant do are related to the fact that it cant verify ids against the html page ( aka host page ). Developers wont get compile time exceptions but will find out until runtime when exceptions are thrown.

What it cant do
  * It cant and wont complain if an annotated id doesnt actually exist on the host page.
  * It cant verify that the widget type is compatible with the element, ie HtmlTemplateFactory wont complain that the element is actually a listbox but your interface method return type is TextBox.

=Further samples=

For further examples refer to the unit test.
  * `rocket.widget.test.htmltemplatefactory.client.HtmlTemplateFactoryGwtTestCase`