// /rocket/beans/rebind/aop/proxyinterceptedmethod/proxy-interceptors-method.txt

try{
	final rocket.beans.client.aop.InterceptorChain chain = new rocket.beans.client.aop.InterceptorChain();

	chain.setMethod( ${methodName} );
	chain.setEnclosingType( ${enclosingType} );
	chain.setParameterTypes( ${methodParameterTypes} );
	chain.setReturnType( ${methodReturnType} );
	chain.setNative( ${isMethodNative} );
	
	// repeat for each advice for this method...
	${addAdvices}
	
	// add a last method interceptor.
	chain.addAdvice( 
	
		// create an anonymous MethodInterceptor that unwraps and invokes the target method.
		new rocket.beans.client.aop.MethodInterceptor(){
	
			public Object invoke(final rocket.beans.client.aop.MethodInvocation invocation) throws Throwable{			
				${invokeTargetMethod}					
			}
			
			public String getMethod(){
				return ${methodName};
			}
				
			public String getEnclosingType(){
				return ${enclosingType};
			}
			public String[] getParameterTypes(){
				return ${methodParameterTypes};
			}
			
			public String getReturnType(){
				return ${methodReturnType};
			}
					
			public boolean isNative(){
				return ${isMethodNative};
			}						
		}	
	);
	
	// set the target
	chain.setTarget( target );
	
	// create an Object array populated with a comma separated list of parameters
	chain.setParameters( new java.lang.Object[]{ ${wrapParameters} });
	
	// actual statement depends on return type of method.
	${interceptorChainInvokeProceed}

// catch and rethrow RuntimeException and declared exceptions. Other exception types are wrapped inside an AopInvocationException
} catch ( final java.lang.RuntimeException rethrow ){
	throw rethrow;	
// dont worry about missing left brace it gets inserted by $rethrowExpectedExceptions below

// rethrow declared exceptions...
${rethrowExpectedExceptions}

// catch and wrap any other exception inside an AopInvocationException
} catch ( final Throwable wrapped ){
	throw new rocket.beans.client.aop.AopInvocationException( wrapped );
}

