ROCKET GWT FRAMEWORK
--------------------

This release of the Rocket GWT library contains a number of widgets, GWT core library fixes as well other useful stuff extract from another project for an inhouse application at work. 

Below is a brief overview and summary of some of the interesting bits and pieces within the library.

client.browser.*
----------------
BrowserHelper        A variety of browser specific helpers, browser detection, working the window title and status.

client.collection.*
------------------
SkippingIterator     A useful abstract iterator which makes it easy to provide an iterator view skipping items.
IteratorView         Template that provides inbuilt fail fast support and other features.
Tree & Branch        A different type of container that provides an tree / branch view of items. Deleting a parent node removes children as well and so on.
LeastRecentlyUsedMap A map which keeps a cap and automatically deletes when its capacity is exceeded.
MultiValueMap        A map that allows multiple values for each key. 

client.dom.*
------------
ElementWrapper       Easy authoring / wrapping of a Tag / element's properties without escaping to jsni.
AbstractElementList  Easy template to provide a List view over a collection of DOM elements. This class makes it easy for client code to work with Widgets rather than Elements.
                     A factory is called when necessary to create the wrapper when an item is fetched.
DomHelper            A variety of misc helpers relating to the Dom.

client.messaging.*
-------------------
A simple messaging package that provides support for publishing and subscribing to topics.

client/server.rpc.*
-------------------
This package exists on the server and provides an easy way to make a request and capture a server side response for a specific resource such as a jsp using rpc avoiding
the need to work with HTTP. The response code, message, content and headers are returned whilst the same can be sent as part of the request.
One could capture form submissions and use this infrastructure rather than the new GWT FormPanel. This mechanism does not support file uploading which must be done via
the FormUpload + FormPanel widget.

client.widget.*
---------------
Interactive tests are present for all widgets testing all their functionality. This may be particularly useful as an example of how to use.
The tests also include simple css which may be useful as a starting point for reuse. 

All widgets provide fully functional fail safe iterators with remove() that all do real proper removes.

TabPanel            A better tab panel that includes a close button and events for various states of an individual tabs lifecycle.
Menu                A better menu system including menu spacers, item disabling and compressed / expanded menus ( such as those you find in various Office / Windows products ).
ContextMenu         A context menu may be attached to a widget via a right mouse button. After that the menu appears at which time the user can select / cancel.
SortableTable       A table that contains columns which may be sorted using comparators. The relevant header also contains controls to support an ascending/descending sort.
                    The data used for the sort may be different than that which appears within each cell. This allows sensible Date / number and other types sort.
Spinner             A simple spinner.
SuperSpinner        An extension of Spinner that includes two additional controls for faster incrementing/decrementing of the value.
CssPicker           A panel which includes buttons to allow selection of any of the pages stylesheets.
PixelGrid           A grid of blocky pixels which can be plotted or read using colours.
ZebraFlexTable      Automatic handling of a table with a zebra effect for odd / even rows.
Pager               This widget provides a paging control similar to the one that appears at the bottom of Google search results. Evnts may be monitored to allow programs to
                    react to pager value changes.
AutoCompleteTextBox A TextBox with an automatically managed drop down list of matches.
Card                A panel that includes a title and provision for adding widgets which appear within its title bar. It also contains a main content area.
BreadcrumbPanel     A panel of breadcrumbs with typical breadcrumb behaviour managed as a stack.
Form                A list view of a Form and its element. Getting by index returns the corresponding Widget eg a TextBox if the item at the given slot is a input field of type
                    text. Wrappers are also present for Reset/Submit/Hidden fields along with other widgets for the other already GWT types.
Grid                Provides a grid of Widgets. 
Life                Something fun which leverages PixelGrid to create a life simulation.

VerticalPanel & HorizontalPanel
                    Fixed the iterators so that remove actually removes the widget from the panel and not only the internal Vector. I have had a quick look at the new 1.1 classes
                    and whilst WidgetCollection probably fixes this problem it does not appear to provide a fail fast iterator.

Helpers & Utilities
-------------------
There are helpers for all sorts of tasks including browser detection, dom manipulation, treating collections as a real java List and so on.

ObjectHelper a variety of assert check methods.
StringHelper more string related assert statements, padding (padLeft, padRight), splittig, starts with / ends with ignoring case etc.
ColourHelper methods to help working with rgb colours, including mixing, making lighter / darker converting to from #rgb values.
+ more ...

A variety of assertors are provided to assert and throw exceptions if a criteria fails.
   ObjectHelper.checkNotNull(), StringHelper.checkNotEmpty() etc.

Getting started
---------------
Tests are provided for all widgets and UnitTests for non visual components.

Check out the provided tests for code examples of how to use them.

An eclipse project and some *.launch files are provided to make it easier to get started. All that is required is for the library reference to GWT 0.21 to be fixed up.
Once this is done any test can be run.

Compiled ready to go tests for various widgets are already present within the www directory.

There are no external dependencies except for the Google Web Toolkit itself.

Contributing back
-----------------
Feel free to reply with comments, suggestions and fixes to my email miroslav <dot> pokorny <at> gmail <dot> com with a subject starting with ROCKET:

The Future
----------
We hope to release more widgets and other useful bits. 

Miroslav Pokorny
