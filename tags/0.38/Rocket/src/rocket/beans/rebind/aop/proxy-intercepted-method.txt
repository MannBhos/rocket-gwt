// proxy-interceptors-method.txt

try{
final rocket.beans.client.aop.InterceptorChain chain = new rocket.beans.client.aop.InterceptorChain();

// repeat for each advice for this method...
${addAdvices}

// add a last method interceptor.
chain.addAdvice( 

	// create an anonymous MethodInterceptor that unwraps and invokes the target method.
	new rocket.beans.client.aop.MethodInterceptor(){

		// 2 templates are used one for the method-interceptor-body.txt and another which is
		// repeated for each parameter unwrap-parameter.txt.
		public Object invoke(final rocket.beans.client.aop.MethodInvocation invocation) throws Throwable{			
			${invokeTargetMethod}					
		}
	}
);

// set the target
chain.setTarget( target );

// create an Object array populated with a comma separated list of parameters
chain.setParameters( new java.lang.Object[]{ ${wrapParameters} });

// actual statement depends on return type of method.
${interceptorChainInvokeProceed}

// catch and rethrow RuntimeException and declared exceptions. Other exception types are wrapped inside an AopInvocationException
} catch ( final java.lang.RuntimeException rethrow ){
	throw rethrow;	

// rethrow declared exceptions...

${rethrowExpectedExceptions}

// catch and wrap any other exception inside an AopInvocationException
} catch ( final Throwable throwable ){
	throw new rocket.beans.client.aop.AopInvocationException( throwable );
}
