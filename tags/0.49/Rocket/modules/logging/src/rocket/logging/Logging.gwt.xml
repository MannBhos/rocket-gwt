<module>
	<!--
	This module is required mostly to access the Checker, Tester and Utilities classes
	-->
	<inherits name="rocket.util.Util" />		
	
	<!--
	This module is required by the ServerLogger logger as it serializes and then pushes logged events to the server.
	-->
	<inherits name="rocket.serialization.Serialization"/>
		
	<source path="client" />

	<!--
	define a property that takes two values yes/no
	-->
	<define-property name="rocket.logging.Logging.enable" values="yes,no"/>

	<!--
	scan url for logging query parameter value of either yes/no
	-->	
	<property-provider name="rocket.logging.Logging.enable">
<![CDATA[
    var logging;
    var yes = "yes";
    var no = "no";
	try {
      
      // Look for the logging as a url argument
      if (logging == null) {
        var queryParameters = location.search;
        var start = queryParameters.indexOf("logging");
        if (start >= 0) {
          var token = queryParameters.substring(start);
          var begin = token.indexOf("=") + 1;
          var end = token.indexOf("&");
          if (end == -1) {
            end = token.length;
          }
          logging = token.substring(begin, end);
        }
      }      
      
      if (logging == null) {  
        // Look for the logging on the web page
        logging = __gwt_getMetaProperty("rocketLoggingEnable")   
      }           
      // any other value other than yes becomes no
      if( logging != yes ){
      	logging = no;
      }
                
    } catch(e){
      alert("Unexpected exception in \"rocket.logging.Logging.enable\" detection, using default: " + e);
      logging = no;
    }
          
     return logging;                
]]>
	</property-provider>
		
	<generate-with class="rocket.logging.rebind.LoggerFactoryGenerator">
		<when-type-assignable class="rocket.logging.client.LoggerFactoryImpl" />
	</generate-with>	
	
</module>

